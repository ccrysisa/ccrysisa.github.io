<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>所有文章 - KZnight&#39;s Blog</title>
    <link>https://ccrysisa.github.io/posts/</link>
    <description>所有文章 | KZnight&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>caijiaxin@dragonos.org (ccrysisa)</managingEditor>
      <webMaster>caijiaxin@dragonos.org (ccrysisa)</webMaster><lastBuildDate>Mon, 04 Mar 2024 15:02:28 &#43;0800</lastBuildDate><atom:link href="https://ccrysisa.github.io/posts/" rel="self" type="application/rss+xml" /><item>
  <title>Linux 核心设计/实作 (Linux Kernel Internals)</title>
  <link>https://ccrysisa.github.io/posts/linux2023/</link>
  <pubDate>Wed, 28 Feb 2024 20:46:33 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023/</guid>
  <description><![CDATA[<blockquote>
<p>在 Linux 核心设计/实作 Spring 2023 课程进度页面的原始档案的基础上，稍作修改以记录我的学习进度</p>
</blockquote>]]></description>
</item>
<item>
  <title>Crust of Rust: Sorting Algorithms</title>
  <link>https://ccrysisa.github.io/posts/orst/</link>
  <pubDate>Mon, 04 Mar 2024 15:02:28 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/orst/</guid>
  <description><![CDATA[<blockquote>
<p>In this Crust of Rust episode, we implement some common sorting algorithms in Rust. This episode doesn't aim to explain any single concept, but rather showcase what writing &ldquo;normal&rdquo; Rust code is like, and explaining various &ldquo;odd bits&rdquo; we come across along the way. The thinking here is that sorting algorithms are both familiar and easy to compare across languages, so this might serve as a good bridge into Rust if you are familiar with other languages.</p>
</blockquote>]]></description>
</item>
<item>
  <title>Linux 核心设计: 发展动态回顾</title>
  <link>https://ccrysisa.github.io/posts/linux-dev-review/</link>
  <pubDate>Sun, 03 Mar 2024 16:07:14 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux-dev-review/</guid>
  <description><![CDATA[<blockquote>
<p>本講座將以 Thorsten Leemhuis 在 FOSDEM 2020 開場演說 &ldquo;Linux kernel – Solving big problems in small steps for more than 20 years&rdquo; (slides) 為主軸，嘗試歸納自 21 世紀第一年開始的 Linux 核心 2.4 版到如今的 5.x 版，中間核心開發者如何克服 SMP (Symmetric multiprocessing), scalability, 及各式硬體架構和周邊裝置支援等難題，過程中提出全面移除 BKL (Big kernel lock)、實作虛擬化技術 (如 Xen 和 KVM)、提出 namespace 和 cgroups 從而確立容器化 (container) 的能力，再來是核心發展的明星技術 eBPF 會在既有的基礎之上，帶來 XDP 和哪些令人驚豔的機制呢？又，Linux 核心終於正式納入發展十餘年的 PREEMPT_RT，使得 Linux 核心得以成為硬即時的作業系統，對內部設計有哪些衝擊？AIO 後繼的 io_uring 讓 Linux 有更優雅且高效的非同步 I/O 存取，我們該如何看待？</p>
</blockquote>]]></description>
</item>
<item>
  <title>RISC-V Optimization Guide</title>
  <link>https://ccrysisa.github.io/posts/riscv-optimization-guide/</link>
  <pubDate>Thu, 29 Feb 2024 23:44:29 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/riscv-optimization-guide/</guid>
  <description><![CDATA[<blockquote>
<p>The intention is to give specific actionable optimization recommendations for software developers writing code for RISC-V application processors.</p>
<p>近日 RISE 基金会发布了一版 《RISC-V Optimization Guide》，其目的是为给 RISC-V 应用处理器编写代码的软件开发人员提供具体可行的优化建议。本次活动的主要内容是解读和讨论该文档内容。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Crust of Rust: Channels</title>
  <link>https://ccrysisa.github.io/posts/channels/</link>
  <pubDate>Thu, 29 Feb 2024 20:30:30 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/channels/</guid>
  <description><![CDATA[<blockquote>
<p>In this (fifth) Crust of Rust video, we cover multi-produce/single-consumer (mpsc) channels, by re-implementing some of the std::sync::mpsc types from the standard library. As part of that, we cover what channels are used for, how they work at a high level, different common channel variants, and common channel implementations. In the process, we go over some common Rust concurrency primitives like Mutex and Condvar.</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 开发工具和规格标准</title>
  <link>https://ccrysisa.github.io/posts/c-standards/</link>
  <pubDate>Wed, 28 Feb 2024 11:11:47 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-standards/</guid>
  <description><![CDATA[<blockquote>
<p>Linux 核心作为世界上最成功的开放原始码计划，也是 C 语言在工程领域的瑰宝，里头充斥则各种“艺术”，往往会吓到初次接触的人们，但总是能够使用 C 语言标准和开发工具提供的扩展 (主要是来自 gcc 的 GNU extensions) 来解释。</p>
<ul>
<li>“工欲善其事，必先利其器”</li>
</ul>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 内存管理、对齐及硬体特性</title>
  <link>https://ccrysisa.github.io/posts/c-memory/</link>
  <pubDate>Tue, 27 Feb 2024 22:44:38 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-memory/</guid>
  <description><![CDATA[<blockquote>
<p>不少 C/C++ 开发者听过 &ldquo;内存对齐&rdquo; (memory alignment)，但不易掌握概念及规则，遑论其在执行时期的冲击。内存管理像是 malloc/free 函数的使用，是每个 C 语言程序设计开发者都会接触到，但却难保充分排除错误的难题。本讲座尝试从硬体的行为开始探讨，希望消除观众对于 alignment, padding, memory allocator 的误解，并且探讨高效能 memory pool 的设计，如何改善整体程序的效能和可靠度。也会探讨 C11 标准的 aligned_alloc。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: bitwise 操作</title>
  <link>https://ccrysisa.github.io/posts/c-bitwise/</link>
  <pubDate>Fri, 23 Feb 2024 13:13:33 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-bitwise/</guid>
  <description><![CDATA[<blockquote>
<p>Linux 核心原始程式码存在大量 bit(-wise) operations (简称 bitops)，颇多乍看像是魔法的 C 程式码就是 bitops 的组合。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Crust of Rust: Smart Pointers and Interior Mutability</title>
  <link>https://ccrysisa.github.io/posts/smart-pointers-and-interior-mutability/</link>
  <pubDate>Tue, 20 Feb 2024 17:33:06 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/smart-pointers-and-interior-mutability/</guid>
  <description><![CDATA[<blockquote>
<p>In this fourth Crust of Rust video, we cover smart pointers and interior mutability, by re-implementing the Cell, RefCell, and Rc types from the standard library. As part of that, we cover when those types are useful, how they work, and what the equivalent thread-safe versions of these types are. In the process, we go over some of the finer details of Rust's ownership model, and the UnsafeCell type. We also dive briefly into the Drop Check rabbit hole (<a href="https://doc.rust-lang.org/nightly/nomicon/dropck.html"target="_blank" rel="external nofollow noopener noreferrer">https://doc.rust-lang.org/nightly/nomicon/dropck.html</a>) before coming back up for air.</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 数值系统</title>
  <link>https://ccrysisa.github.io/posts/c-numerics/</link>
  <pubDate>Tue, 20 Feb 2024 11:13:57 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-numerics/</guid>
  <description><![CDATA[<blockquote>
<p>尽管数值系统并非 C 语言所持有，但在 Linux 核心大量存在 u8/u16/u32/u64 这样通过 typedef 所定义的类型，伴随着各种 alignment 存取，如果对数值系统的认知不够充分，可能立即就被阻拦在探索 Linux 核心之外——毕竟你完全搞不清楚，为何 Linux 核心存取特定资料需要绕一大圈。</p>
</blockquote>]]></description>
</item>
</channel>
</rss>
