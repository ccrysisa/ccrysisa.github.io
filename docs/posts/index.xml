<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>所有文章 - KZn&#39;s Blog</title>
    <link>https://ccrysisa.github.io/posts/</link>
    <description>所有文章 | KZn&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>caijiaxin@dragonos.org (ccrysisa)</managingEditor>
      <webMaster>caijiaxin@dragonos.org (ccrysisa)</webMaster><lastBuildDate>Wed, 28 Feb 2024 20:46:33 &#43;0800</lastBuildDate><atom:link href="https://ccrysisa.github.io/posts/" rel="self" type="application/rss+xml" /><item>
  <title>Linux 核心设计/实作 (Linux Kernel Internals) Spring 2023</title>
  <link>https://ccrysisa.github.io/posts/linux2023/</link>
  <pubDate>Wed, 28 Feb 2024 20:46:33 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023/</guid>
  <description><![CDATA[<blockquote>
<p>在 Linux 核心设计/实作 Spring 2023 课程进度页面的原始档案的基础上，稍作修改以记录我的学习进度</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 开发工具和规格标准</title>
  <link>https://ccrysisa.github.io/posts/c-standards/</link>
  <pubDate>Wed, 28 Feb 2024 11:11:47 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-standards/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 内存管理、对齐及硬体特性</title>
  <link>https://ccrysisa.github.io/posts/c-memory/</link>
  <pubDate>Tue, 27 Feb 2024 22:44:38 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-memory/</guid>
  <description><![CDATA[<blockquote>
<p>不少 C/C++ 开发者听过 &ldquo;内存对齐&rdquo; (memory alignment)，但不易掌握概念及规则，遑论其在执行时期的冲击。内存管理像是 malloc/free 函数的使用，是每个 C 语言程序设计开发者都会接触到，但却难保充分排除错误的难题。本讲座尝试从硬体的行为开始探讨，希望消除观众对于 alignment, padding, memory allocator 的误解，并且探讨高效能 memory pool 的设计，如何改善整体程序的效能和可靠度。也会探讨 C11 标准的 aligned_alloc。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: bitwise 操作</title>
  <link>https://ccrysisa.github.io/posts/c-bitwise/</link>
  <pubDate>Fri, 23 Feb 2024 13:13:33 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-bitwise/</guid>
  <description><![CDATA[<blockquote>
<p>Linux 核心原始程式码存在大量 bit(-wise) operations (简称 bitops)，颇多乍看像是魔法的 C 程式码就是 bitops 的组合。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Crust of Rust: Smart Pointers and Interior Mutability</title>
  <link>https://ccrysisa.github.io/posts/smart-pointers-and-interior-mutability/</link>
  <pubDate>Tue, 20 Feb 2024 17:33:06 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/smart-pointers-and-interior-mutability/</guid>
  <description><![CDATA[<blockquote>
<p>In this fourth Crust of Rust video, we cover smart pointers and interior mutability, by re-implementing the Cell, RefCell, and Rc types from the standard library. As part of that, we cover when those types are useful, how they work, and what the equivalent thread-safe versions of these types are. In the process, we go over some of the finer details of Rust's ownership model, and the UnsafeCell type. We also dive briefly into the Drop Check rabbit hole (<a href="https://doc.rust-lang.org/nightly/nomicon/dropck.html"target="_blank" rel="external nofollow noopener noreferrer">https://doc.rust-lang.org/nightly/nomicon/dropck.html</a>) before coming back up for air.</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 数值系统</title>
  <link>https://ccrysisa.github.io/posts/c-numerics/</link>
  <pubDate>Tue, 20 Feb 2024 11:13:57 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-numerics/</guid>
  <description><![CDATA[<blockquote>
<p>尽管数值系统并非 C 语言所持有，但在 Linux 核心大量存在 u8/u16/u32/u64 这样通过 typedef 所定义的类型，伴随着各种 alignment 存取，如果对数值系统的认知不够充分，可能立即就被阻拦在探索 Linux 核心之外——毕竟你完全搞不清楚，为何 Linux 核心存取特定资料需要绕一大圈。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Linux 核心设计: Lab0</title>
  <link>https://ccrysisa.github.io/posts/linux2023-lab0/</link>
  <pubDate>Mon, 19 Feb 2024 16:23:01 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023-lab0/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>Implementing TCP/IP in Rust</title>
  <link>https://ccrysisa.github.io/posts/rust-tcp/</link>
  <pubDate>Sat, 17 Feb 2024 19:01:53 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/rust-tcp/</guid>
  <description><![CDATA[<blockquote>
<p>In this stream, we started implementing the ubiquitous TCP protocol that underlies much of the traffic on the internet! In particular, we followed RFC 793 — <a href="https://tools.ietf.org/html/rfc793"target="_blank" rel="external nofollow noopener noreferrer">https://tools.ietf.org/html/rfc793</a> — which describes the original protocol, with the goal of being able to set up and tear down a connection with a &ldquo;real&rdquo; TCP stack at the other end (netcat in particular). We&rsquo;re writing it using a user-space networking interface (see <a href="https://www.kernel.org/doc/Documentation/networking/tuntap.txt"target="_blank" rel="external nofollow noopener noreferrer">https://www.kernel.org/doc/Documentation/networking/tuntap.txt</a> and the Rust bindings at <a href="https://docs.rs/tun-tap/%29"target="_blank" rel="external nofollow noopener noreferrer">https://docs.rs/tun-tap/)</a>.</p>
</blockquote>]]></description>
</item>
<item>
  <title>Linux 核心设计: 第 1 周测验题 linked list</title>
  <link>https://ccrysisa.github.io/posts/linux-quiz1/</link>
  <pubDate>Fri, 16 Feb 2024 14:59:25 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux-quiz1/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>Linux 核心设计: 操作系统术语及概念</title>
  <link>https://ccrysisa.github.io/posts/linux-concepts/</link>
  <pubDate>Thu, 15 Feb 2024 12:51:49 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux-concepts/</guid>
  <description><![CDATA[<blockquote>
<p>面對原始程式碼超越 3 千萬行規模的 Linux 核心 (2023 年)，最令人感到挫折的，絕非缺乏程式註解，而是就算見到滿滿的註解，自己卻有如文盲，全然無從理解起。為什麼呢？往往是因為對作業系統的認知太侷限。</p>
</blockquote>]]></description>
</item>
</channel>
</rss>
