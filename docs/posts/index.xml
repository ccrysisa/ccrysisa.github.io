<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>所有文章 - KZn&#39;s Blog</title>
    <link>https://ccrysisa.github.io/posts/</link>
    <description>所有文章 | KZn&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>caijiaxin@dragonos.org (ccrysisa)</managingEditor>
      <webMaster>caijiaxin@dragonos.org (ccrysisa)</webMaster><lastBuildDate>Fri, 23 Feb 2024 13:13:33 &#43;0800</lastBuildDate><atom:link href="https://ccrysisa.github.io/posts/" rel="self" type="application/rss+xml" /><item>
  <title>C Bitwise</title>
  <link>https://ccrysisa.github.io/posts/c-bitwise/</link>
  <pubDate>Fri, 23 Feb 2024 13:13:33 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-bitwise/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>Crust of Rust: Smart Pointers and Interior Mutability</title>
  <link>https://ccrysisa.github.io/posts/smart-pointers-and-interior-mutability/</link>
  <pubDate>Tue, 20 Feb 2024 17:33:06 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/smart-pointers-and-interior-mutability/</guid>
  <description><![CDATA[<blockquote>
<p>In this fourth Crust of Rust video, we cover smart pointers and interior mutability, by re-implementing the Cell, RefCell, and Rc types from the standard library. As part of that, we cover when those types are useful, how they work, and what the equivalent thread-safe versions of these types are. In the process, we go over some of the finer details of Rust&rsquo;s ownership model, and the UnsafeCell type. We also dive briefly into the Drop Check rabbit hole (<a href="https://doc.rust-lang.org/nightly/nomicon/dropck.html"target="_blank" rel="external nofollow noopener noreferrer">https://doc.rust-lang.org/nightly/nomicon/dropck.html</a>) before coming back up for air.</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 数值系统</title>
  <link>https://ccrysisa.github.io/posts/c-numerics/</link>
  <pubDate>Tue, 20 Feb 2024 11:13:57 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-numerics/</guid>
  <description><![CDATA[<blockquote>
<p>尽管数值系统并非 C 语言所持有，但在 Linux 核心大量存在 u8/u16/u32/u64 这样通过 typedef 所定义的类型，伴随着各种 alignment 存取，如果对数值系统的认知不够充分，可能立即就被阻拦在探索 Linux 核心之外——毕竟你完全搞不清楚，为何 Linux 核心存取特定资料需要绕一大圈。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Linux 核心设计: Lab0</title>
  <link>https://ccrysisa.github.io/posts/linux2023-lab0/</link>
  <pubDate>Mon, 19 Feb 2024 16:23:01 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023-lab0/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>Implementing TCP/IP in Rust</title>
  <link>https://ccrysisa.github.io/posts/rust-tcp/</link>
  <pubDate>Sat, 17 Feb 2024 19:01:53 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/rust-tcp/</guid>
  <description><![CDATA[<blockquote>
<p>In this stream, we started implementing the ubiquitous TCP protocol that underlies much of the traffic on the internet! In particular, we followed RFC 793 — <a href="https://tools.ietf.org/html/rfc793"target="_blank" rel="external nofollow noopener noreferrer">https://tools.ietf.org/html/rfc793</a> — which describes the original protocol, with the goal of being able to set up and tear down a connection with a &ldquo;real&rdquo; TCP stack at the other end (netcat in particular). We&rsquo;re writing it using a user-space networking interface (see <a href="https://www.kernel.org/doc/Documentation/networking/tuntap.txt"target="_blank" rel="external nofollow noopener noreferrer">https://www.kernel.org/doc/Documentation/networking/tuntap.txt</a> and the Rust bindings at <a href="https://docs.rs/tun-tap/%29"target="_blank" rel="external nofollow noopener noreferrer">https://docs.rs/tun-tap/)</a>.</p>
</blockquote>]]></description>
</item>
<item>
  <title>Linux 核心设计: 第 1 周测验题</title>
  <link>https://ccrysisa.github.io/posts/linux-quiz1/</link>
  <pubDate>Fri, 16 Feb 2024 14:59:25 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux-quiz1/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>Linux 核心设计: 操作系统术语及概念</title>
  <link>https://ccrysisa.github.io/posts/linux-concepts/</link>
  <pubDate>Thu, 15 Feb 2024 12:51:49 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux-concepts/</guid>
  <description><![CDATA[<blockquote>
<p>面對原始程式碼超越 3 千萬行規模的 Linux 核心 (2023 年)，最令人感到挫折的，絕非缺乏程式註解，而是就算見到滿滿的註解，自己卻有如文盲，全然無從理解起。為什麼呢？往往是因為對作業系統的認知太侷限。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Crust of Rust: Iterators</title>
  <link>https://ccrysisa.github.io/posts/iterators/</link>
  <pubDate>Mon, 05 Feb 2024 17:18:34 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/iterators/</guid>
  <description><![CDATA[<blockquote>
<p>In this third Crust of Rust video, we cover iterators and trait bounds, by re-implementing the &ldquo;flatten&rdquo; Iterator method from the standard library. As part of that, we cover some of the weirder trait bounds that are required, including what&rsquo;s needed to extend the implementation to support backwards iteration.</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: linked list 和非连续内存</title>
  <link>https://ccrysisa.github.io/posts/c-linked-list/</link>
  <pubDate>Sat, 03 Feb 2024 10:44:56 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-linked-list/</guid>
  <description><![CDATA[<blockquote>
<p>无论是操作系统核心、C 语言函数库内部、程序开发框架，到应用程序，都不难见到 linked list 的身影，包含多种针对性能和安全议题所做的 linked list 变形，又还要考虑应用程序的泛用性 (generic programming)，是很好的进阶题材。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Crust of Rust: Declarative Macros</title>
  <link>https://ccrysisa.github.io/posts/declarative-macros/</link>
  <pubDate>Wed, 31 Jan 2024 22:32:27 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/declarative-macros/</guid>
  <description><![CDATA[<blockquote>
<p>In this second Crust of Rust video, we cover declarative macros, macro_rules!, by re-implementing the vec! macro from the standard library. As part of that, we cover not only how to write these, but some of the gotchas and tricks you&rsquo;ll run into, and some common use-cases.</p>
</blockquote>]]></description>
</item>
</channel>
</rss>
