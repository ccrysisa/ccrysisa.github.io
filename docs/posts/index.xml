<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>所有文章 - KZnight&#39;s Blog</title>
    <link>https://ccrysisa.github.io/posts/</link>
    <description>所有文章 | KZnight&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>caijiaxin@dragonos.org (ccrysisa)</managingEditor>
      <webMaster>caijiaxin@dragonos.org (ccrysisa)</webMaster><lastBuildDate>Mon, 08 Jul 2024 11:21:32 &#43;0800</lastBuildDate><atom:link href="https://ccrysisa.github.io/posts/" rel="self" type="application/rss+xml" /><item>
  <title>Linux 核心设计/实作 (Linux Kernel Internals)</title>
  <link>https://ccrysisa.github.io/posts/linux2023/</link>
  <pubDate>Wed, 28 Feb 2024 20:46:33 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023/</guid>
  <description><![CDATA[<blockquote>
<p>在「Linux 核心设计/实作」Spring 2023 课程进度页面的原始档案的基础上，稍作修改以记录我的学习进度</p>
</blockquote>]]></description>
</item>
<item>
  <title>Crust of Rust: The Drop Check</title>
  <link>https://ccrysisa.github.io/posts/drop-check/</link>
  <pubDate>Mon, 08 Jul 2024 11:21:32 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/drop-check/</guid>
  <description><![CDATA[<blockquote>
<p>In this episode of Crust of Rust, we go over the &quot;drop check&quot; — another niche part of Rust that most people don't have to think about, but which rears its moderately attractive head occasionally when you use generic types in semi-weird ways. In particular, we explore how to implement a Norwegian version of <code>Box</code> (which is really just <code>Box</code> with a different name), and find that the straightforward implementation is not quite as flexible as the standard <code>Box</code> is due to the drop check. When we fix it, we then make it too flexible, and open ourselves the type up to undefined behavior. Which, in turn, we use the drop check to fix. Towards the end, we go through a particularly interesting example at the intersection of the drop check and variance in the form of (ab)using <code>std::iter::Empty</code>.</p>
</blockquote>]]></description>
</item>
<item>
  <title>Modern C&#43;&#43;</title>
  <link>https://ccrysisa.github.io/posts/modern-cpp/</link>
  <pubDate>Sun, 30 Jun 2024 00:19:25 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/modern-cpp/</guid>
  <description><![CDATA[<p>&ldquo;Modern&rdquo; C++ isn&rsquo;t afraid to use any or all of the following:</p>
<ul>
<li>RAII</li>
<li>standard library containers and algorithms</li>
<li>templates</li>
<li>metaprogramming</li>
<li>exceptions</li>
<li>Boost</li>
</ul>
<p>&ldquo;Old&rdquo; C++ tends to avoid these things due to a perceived lack of compiler support or run-time performance. Instead, you&rsquo;ll find&hellip;</p>
<ul>
<li>lots of <code>new</code> and <code>delete</code></li>
<li>roll-your-own linked lists and other data structures</li>
<li>return codes as a mechanism for error handling</li>
<li>one of the millions of custom string classes that aren&rsquo;t std::string</li>
</ul>
<p>As with all this-vs-that arguments, there are merits to both approaches. Modern C++ isn&rsquo;t universally better. Embedded enviornments, for example, often require extra restrictions that most people never need, so you&rsquo;ll see a lot of old-style code there. Overall though, I think you&rsquo;ll find that most of the modern features are worth using regularly. Moore&rsquo;s Law and compiler improvements have taken care of the majority of reasons to avoid the new stuff.</p>]]></description>
</item>
<item>
  <title>Build a linked hash map in Rust</title>
  <link>https://ccrysisa.github.io/posts/build-a-linked-hashmap-in-rust/</link>
  <pubDate>Fri, 28 Jun 2024 11:16:51 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/build-a-linked-hashmap-in-rust/</guid>
  <description><![CDATA[<blockquote>
<p>We're writing it end-to-end in one sitting, with the hope of ending up with a decent understanding of how hash map works, and how you'd make the interface idiomatic Rust. I have tried to make sure I introduce new concepts we come across, so it should be possible to follow whether you're a newcomer to the language or not.</p>
</blockquote>]]></description>
</item>
<item>
  <title>Atomic Weapons: The C&#43;&#43; Memory Model and Modern Hardware</title>
  <link>https://ccrysisa.github.io/posts/atomic-weapons/</link>
  <pubDate>Wed, 19 Jun 2024 09:43:11 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/atomic-weapons/</guid>
  <description><![CDATA[<blockquote>
<p>This is a two-part talk that covers the C++ memory model, how locks and atomics and fences interact and map to hardware, and more. Even though we’re talking about C++, much of this is also applicable to Java and .NET which have similar memory models, but not all the features of C++ (such as relaxed atomics).</p>
</blockquote>]]></description>
</item>
<item>
  <title>手把手带你使用 Rust 实现链表</title>
  <link>https://ccrysisa.github.io/posts/too-many-lists/</link>
  <pubDate>Sat, 15 Jun 2024 20:24:56 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/too-many-lists/</guid>
  <description><![CDATA[<div class="details admonition abstract open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-list-ul fa-fw" aria-hidden="true"></i>摘要<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>其它语言：兄弟，语言学了吗？来写一个链表证明你基本掌握了语法。</p>
<p>Rust 语言: 兄弟，语言精通了吗？来写一个链表证明你已经精通了 Rust！</p>
</div>
    </div>
  </div>]]></description>
</item>
<item>
  <title>从 Revolution OS 看操作系统生态变化</title>
  <link>https://ccrysisa.github.io/posts/revolution-os/</link>
  <pubDate>Sun, 09 Jun 2024 19:50:03 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/revolution-os/</guid>
  <description><![CDATA[<blockquote>
<p>2001 年，J. T. S. Moore 以自由軟體和開放原始碼軟體發展為主題，導演相當可貴的紀錄片《Revolution OS》，訪談若干先鋒者，是理解黑客 (hacker)、 GNU 計畫、自由軟體基金會 (FSF)、Linux 核心 (kernel)、開放原始碼 (open source) 和自由軟體 (free software) 基於不同理念各自發展、Netscape 宣佈 Mozilla 開放原始碼專案、基於 Apache 和一系列開放原始碼技術的公司、在 NASDAQ 上市等等歷程的第一手資訊。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Linux 核心设计: 2023q2 第二周测验题</title>
  <link>https://ccrysisa.github.io/posts/linux2023-quiz2/</link>
  <pubDate>Sat, 08 Jun 2024 10:52:10 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023-quiz2/</guid>
  <description><![CDATA[<div class="details admonition abstract open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-list-ul fa-fw" aria-hidden="true"></i>摘要<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">目的: 检验学员对 bitwise 的认知</div>
    </div>
  </div>]]></description>
</item>
<item>
  <title>Linux 核心设计: 2023q1 第一周测验题</title>
  <link>https://ccrysisa.github.io/posts/linux2023-quiz1/</link>
  <pubDate>Fri, 07 Jun 2024 10:33:35 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023-quiz1/</guid>
  <description><![CDATA[<div class="details admonition abstract open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-list-ul fa-fw" aria-hidden="true"></i>摘要<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">目的: 检验学员对 linked list 的认知</div>
    </div>
  </div>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 浮点数</title>
  <link>https://ccrysisa.github.io/posts/c-floating-point/</link>
  <pubDate>Tue, 04 Jun 2024 23:59:50 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-floating-point/</guid>
  <description><![CDATA[<blockquote>
<p>工程領域往往是一系列的取捨結果，浮點數更是如此，在軟體發開發有太多失誤案例源自工程人員對浮點數運算的掌握不足，本議程希望藉由探討真實世界的血淋淋案例，帶著學員思考 IEEE 754 規格和相關軟硬體考量點，最後也會探討在深度學習領域為了改善資料處理效率，而引入的 BFloat16 這樣的新標準</p>
</blockquote>]]></description>
</item>
</channel>
</rss>
