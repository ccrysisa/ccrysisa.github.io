<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>KZnight&#39;s Blog</title>
    <link>https://ccrysisa.github.io/</link>
    <description>这是我的 Hugo FixIt 博客网站</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>caijiaxin@dragonos.org (ccrysisa)</managingEditor>
      <webMaster>caijiaxin@dragonos.org (ccrysisa)</webMaster><lastBuildDate>Thu, 28 Mar 2024 12:21:48 &#43;0800</lastBuildDate>
      <atom:link href="https://ccrysisa.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
  <title>Linux 核心设计/实作 (Linux Kernel Internals)</title>
  <link>https://ccrysisa.github.io/posts/linux2023/</link>
  <pubDate>Wed, 28 Feb 2024 20:46:33 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023/</guid>
  <description><![CDATA[<blockquote>
<p>在 Linux 核心设计/实作 Spring 2023 课程进度页面的原始档案的基础上，稍作修改以记录我的学习进度</p>
</blockquote>]]></description>
</item>
<item>
  <title>Deepin 20.9 KVM 安装和管理</title>
  <link>https://ccrysisa.github.io/posts/deepin-kvm/</link>
  <pubDate>Thu, 28 Mar 2024 12:21:48 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/deepin-kvm/</guid>
  <description><![CDATA[<p>本篇主要介绍在 deepin20.9 操作系统平台下，使用 KVM 虚拟化技术来创建和安装 Linux 发行版，并以创建安装 openEuler 22.03 LTS SP3 的 KVM 虚拟机作为示范，让学员领略 KVM 虚拟化技术的强大魅力。</p>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 前置处理器应用篇</title>
  <link>https://ccrysisa.github.io/posts/c-preprocessor/</link>
  <pubDate>Mon, 25 Mar 2024 22:55:44 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-preprocessor/</guid>
  <description><![CDATA[<blockquote>
<p>相較於頻繁納入新語法的程式語言 (如 C++ 和 Java)，C 語言顯得很保守，但總是能藉由前置處理器 (preprocessor) 對語法進行擴充，甚至搭配工具鏈 (toolchain) 的若干進階機制，做到大大超出程式語言規範的複雜機制。例如主要以 C 語言開發的 Linux 核心就搭配前置處理器和連結器 (linker) 的特徵，實作出 Linux 核心模組，允許開發者動態掛載/卸載，因巨集包裝得好，多數 Linux 核心核心模組的開發者只要專注在與 Linux 核心互動的部分。</p>
</blockquote>
<blockquote>
<p>本議程回顧 C99/C11 的巨集 (macro) 特徵，探討 C11 新的關鍵字 _Generic 搭配 macro 來達到 C++ template 的作用。探討 C 語言程式的物件導向程式設計、抽象資料型態 (ADT) / 泛型程式設計 (Generics)、程式碼產生器、模仿其他程式語言，以及用前置處理器搭配多種工具程式的技巧，還探討 Linux 核心原始程式碼善用巨集來擴充程式開發的豐富度，例如: BUILD_BUG_ON_ZERO,max, min, 和 container_of 等巨集。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Crust of Rust: Subtying and Variance</title>
  <link>https://ccrysisa.github.io/posts/subtying-and-variance/</link>
  <pubDate>Sun, 17 Mar 2024 10:38:01 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/subtying-and-variance/</guid>
  <description><![CDATA[<blockquote>
<p>In this episode of Crust of Rust, we go over subtyping and variance — a niche part of Rust that most people don&rsquo;t have to think about, but which is deeply ingrained in some of Rust&rsquo;s borrow ergonomics, and occasionally manifests in confusing ways. In particular, we explore how trying to implement the relatively straightforward <code>strtok</code> function from C/C++ in Rust quickly lands us in a place where the function is more or less impossible to call due to variance!</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 递归调用篇</title>
  <link>https://ccrysisa.github.io/posts/c-recursion/</link>
  <pubDate>Sat, 16 Mar 2024 20:56:18 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-recursion/</guid>
  <description><![CDATA[<blockquote>
<p>在许多应用程序中，递归 (recursion) 可以简单又优雅地解决貌似繁琐的问题，也就是不断地拆解原有问题为相似的子问题，直到无法拆解为止，并且定义最简化状况的处理机制，一如数学思维。递归对 C 语言程序开发者来说，绝对不会陌生，但能掌握者却少，很多人甚至难以讲出汉诺塔之外的使用案例。</p>
<p>究竟递归是如何优雅地解决真实世界的问题，又如何兼顾执行效率呢》我们从运作原理开始探讨，搭配若干 C 程序解说，并且我们将以简化过的 UNIX 工具为例，分析透过递归来大幅缩减程式码。</p>
<p>或许跟你想象中不同，Linux 核心的原始程式码里头也用到递归函数呼叫，特别在较复杂的实作，例如文件系统，善用递归可大幅缩减程式码，但这也导致追踪程序运作的难度大增。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Linux 核心的 hash table 实作</title>
  <link>https://ccrysisa.github.io/posts/linux-hashtable/</link>
  <pubDate>Sat, 16 Mar 2024 10:59:36 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux-hashtable/</guid>
  <description><![CDATA[<blockquote>
<p>Linux 核心如同其它复杂的资讯系统，也提供 <a href="https://en.wikipedia.org/wiki/Hash_table"target="_blank" rel="external nofollow noopener noreferrer">hash table</a> 的实作，但其原始程式码中却藏有间接指针 (可参见 <a href="https://hackmd.io/@sysprog/c-linked-list"target="_blank" rel="external nofollow noopener noreferrer">你所不知道的 C 语言: linked list 和非连续内存</a>) 的巧妙和数学奥秘。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 函数调用篇</title>
  <link>https://ccrysisa.github.io/posts/c-function/</link>
  <pubDate>Fri, 15 Mar 2024 10:40:59 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-function/</guid>
  <description><![CDATA[<blockquote>
<p>本讲座将带着学员重新探索函数呼叫背后的原理，从程序语言和计算机结构的发展简史谈起，让学员自电脑软硬件演化过程去掌握 calling convention 的考量，伴随着 stack 和 heap 的操作，再探讨 C 程序如何处理函数呼叫、跨越函数间的跳跃 (如 <a href="https://man7.org/linux/man-pages/man3/setjmp.3.html"target="_blank" rel="external nofollow noopener noreferrer">setjmp</a> 和 <a href="https://linux.die.net/man/3/longjmp"target="_blank" rel="external nofollow noopener noreferrer">longjmp</a>)，再来思索资讯安全和执行效率的议题。着重在计算机架构对应的支援和行为分析。</p>
</blockquote>]]></description>
</item>
<item>
  <title>并行程序设计: 执行顺序</title>
  <link>https://ccrysisa.github.io/posts/concurrency-ordering/</link>
  <pubDate>Mon, 11 Mar 2024 16:23:57 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/concurrency-ordering/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>并行程序设计: 概念</title>
  <link>https://ccrysisa.github.io/posts/concurrency-concepts/</link>
  <pubDate>Fri, 08 Mar 2024 17:29:25 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/concurrency-concepts/</guid>
  <description><![CDATA[<blockquote>
<p>透过建立 Concurrency 和 Parallelism、Mutex 与 Semaphore 的基本概念，本讲座将透过 POSIX Tread 探讨 thread pool, Lock-Free Programming, lock-free 使用的 atomic 操作, memory ordering, M:N threading model 等进阶议题。</p>
</blockquote>]]></description>
</item>
<item>
  <title>openEuler RISC-V 系统: QEMU 仿真</title>
  <link>https://ccrysisa.github.io/posts/openeuler-riscv-qemu/</link>
  <pubDate>Thu, 07 Mar 2024 14:48:21 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/openeuler-riscv-qemu/</guid>
  <description><![CDATA[<blockquote>
<p>本文对通过 QEMU 仿真 RISC-V 环境并启动 OpenEuler RISC-V 系统的流程进行详细介绍，以及介绍如何通过 <a href="https://gitee.com/openeuler/mugen"target="_blank" rel="external nofollow noopener noreferrer">mugen</a> 测试框架来对 RISC-V 版本的 openEuler 进行系统、软件等方面测试，并根据测试日志对错误原因进行分析。</p>
</blockquote>]]></description>
</item>
</channel>
</rss>
