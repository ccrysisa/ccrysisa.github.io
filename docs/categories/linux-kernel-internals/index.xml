<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Linux Kernel Internals - 分类 - KZnight&#39;s Blog</title>
    <link>https://ccrysisa.github.io/categories/linux-kernel-internals/</link>
    <description>Linux Kernel Internals - 分类 - KZnight&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>caijiaxin@dragonos.org (ccrysisa)</managingEditor>
      <webMaster>caijiaxin@dragonos.org (ccrysisa)</webMaster><lastBuildDate>Wed, 10 Apr 2024 16:09:35 &#43;0800</lastBuildDate><atom:link href="https://ccrysisa.github.io/categories/linux-kernel-internals/" rel="self" type="application/rss+xml" /><item>
  <title>Linux 核心设计/实作 (Linux Kernel Internals)</title>
  <link>https://ccrysisa.github.io/posts/linux2023/</link>
  <pubDate>Wed, 28 Feb 2024 20:46:33 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023/</guid>
  <description><![CDATA[<blockquote>
<p>在「Linux 核心设计/实作」Spring 2023 课程进度页面的原始档案的基础上，稍作修改以记录我的学习进度</p>
</blockquote>]]></description>
</item>
<item>
  <title>并行程序设计: POSIX Threads</title>
  <link>https://ccrysisa.github.io/posts/posix-threads/</link>
  <pubDate>Wed, 10 Apr 2024 16:09:35 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/posix-threads/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 技巧篇</title>
  <link>https://ccrysisa.github.io/posts/c-trick/</link>
  <pubDate>Wed, 10 Apr 2024 16:06:08 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-trick/</guid>
  <description><![CDATA[<blockquote>
<p>本次講座將選定幾個案例，藉此解說 C 語言程式設計的技巧，像是對矩陣操作進行包裝、初始化特定結構的成員、追蹤物件配置的記憶體、Smart Pointer 等等。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: goto 和流程控制篇</title>
  <link>https://ccrysisa.github.io/posts/c-control-flow/</link>
  <pubDate>Fri, 05 Apr 2024 11:39:34 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-control-flow/</guid>
  <description><![CDATA[<blockquote>
<p>goto 在 C 語言被某些人看做是妖魔般的存在，不過實在不用這樣看待，至少在 Linux 核心原始程式碼中，goto 是大量存在 (跟你想像中不同吧)。有時不用 goto 會寫出更可怕的程式碼。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 前置处理器应用篇</title>
  <link>https://ccrysisa.github.io/posts/c-preprocessor/</link>
  <pubDate>Mon, 25 Mar 2024 22:55:44 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-preprocessor/</guid>
  <description><![CDATA[<blockquote>
<p>C 语言之所以不需要时常发布新的语言特性又可以保持活力，前置处理器 (preprocessor) 是很重要的因素，有心者可进行「扩充」C 语言。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 递归调用篇</title>
  <link>https://ccrysisa.github.io/posts/c-recursion/</link>
  <pubDate>Sat, 16 Mar 2024 20:56:18 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-recursion/</guid>
  <description><![CDATA[<blockquote>
<p>在许多应用程序中，递归 (recursion) 可以简单又优雅地解决貌似繁琐的问题，也就是不断地拆解原有问题为相似的子问题，直到无法拆解为止，并且定义最简化状况的处理机制，一如数学思维。递归对 C 语言程序开发者来说，绝对不会陌生，但能掌握者却少，很多人甚至难以讲出汉诺塔之外的使用案例。</p>
<p>究竟递归是如何优雅地解决真实世界的问题，又如何兼顾执行效率呢》我们从运作原理开始探讨，搭配若干 C 程序解说，并且我们将以简化过的 UNIX 工具为例，分析透过递归来大幅缩减程式码。</p>
<p>或许跟你想象中不同，Linux 核心的原始程式码里头也用到递归函数呼叫，特别在较复杂的实作，例如文件系统，善用递归可大幅缩减程式码，但这也导致追踪程序运作的难度大增。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Linux 核心的 hash table 实作</title>
  <link>https://ccrysisa.github.io/posts/linux-hashtable/</link>
  <pubDate>Sat, 16 Mar 2024 10:59:36 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux-hashtable/</guid>
  <description><![CDATA[<blockquote>
<p>Linux 核心如同其它复杂的资讯系统，也提供 <a href="https://en.wikipedia.org/wiki/Hash_table"target="_blank" rel="external nofollow noopener noreferrer">hash table</a> 的实作，但其原始程式码中却藏有间接指针 (可参见 <a href="https://hackmd.io/@sysprog/c-linked-list"target="_blank" rel="external nofollow noopener noreferrer">你所不知道的 C 语言: linked list 和非连续内存</a>) 的巧妙和数学奥秘。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 函数调用篇</title>
  <link>https://ccrysisa.github.io/posts/c-function/</link>
  <pubDate>Fri, 15 Mar 2024 10:40:59 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-function/</guid>
  <description><![CDATA[<blockquote>
<p>本讲座将带着学员重新探索函数呼叫背后的原理，从程序语言和计算机结构的发展简史谈起，让学员自电脑软硬件演化过程去掌握 calling convention 的考量，伴随着 stack 和 heap 的操作，再探讨 C 程序如何处理函数呼叫、跨越函数间的跳跃 (如 <a href="https://man7.org/linux/man-pages/man3/setjmp.3.html"target="_blank" rel="external nofollow noopener noreferrer">setjmp</a> 和 <a href="https://linux.die.net/man/3/longjmp"target="_blank" rel="external nofollow noopener noreferrer">longjmp</a>)，再来思索资讯安全和执行效率的议题。着重在计算机架构对应的支援和行为分析。</p>
</blockquote>]]></description>
</item>
<item>
  <title>并行程序设计: 执行顺序</title>
  <link>https://ccrysisa.github.io/posts/concurrency-ordering/</link>
  <pubDate>Mon, 11 Mar 2024 16:23:57 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/concurrency-ordering/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>并行程序设计: 概念</title>
  <link>https://ccrysisa.github.io/posts/concurrency-concepts/</link>
  <pubDate>Fri, 08 Mar 2024 17:29:25 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/concurrency-concepts/</guid>
  <description><![CDATA[<blockquote>
<p>透过建立 Concurrency 和 Parallelism、Mutex 与 Semaphore 的基本概念，本讲座将透过 POSIX Tread 探讨 thread pool, Lock-Free Programming, lock-free 使用的 atomic 操作, memory ordering, M:N threading model 等进阶议题。</p>
</blockquote>]]></description>
</item>
</channel>
</rss>
