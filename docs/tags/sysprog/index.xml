<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Sysprog - 标签 - KZnight&#39;s Blog</title>
    <link>https://ccrysisa.github.io/tags/sysprog/</link>
    <description>Sysprog - 标签 | KZnight&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>caijiaxin@dragonos.org (ccrysisa)</managingEditor>
      <webMaster>caijiaxin@dragonos.org (ccrysisa)</webMaster><lastBuildDate>Wed, 24 Apr 2024 21:09:59 &#43;0800</lastBuildDate><atom:link href="https://ccrysisa.github.io/tags/sysprog/" rel="self" type="application/rss+xml" /><item>
  <title>Linux 核心设计/实作 (Linux Kernel Internals)</title>
  <link>https://ccrysisa.github.io/posts/linux2023/</link>
  <pubDate>Wed, 28 Feb 2024 20:46:33 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023/</guid>
  <description><![CDATA[<blockquote>
<p>在「Linux 核心设计/实作」Spring 2023 课程进度页面的原始档案的基础上，稍作修改以记录我的学习进度</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 编译器和最佳化原理篇</title>
  <link>https://ccrysisa.github.io/posts/c-compiler-optimization/</link>
  <pubDate>Wed, 24 Apr 2024 21:09:59 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-compiler-optimization/</guid>
  <description><![CDATA[<blockquote>
<p>編譯器最佳化篇將以 gcc / llvm 為探討對象，簡述編譯器如何運作，以及如何實現最佳化，佐以探究 C 編譯器原理和案例分析，相信可以釐清許多人對 C 編譯器的誤解，從而開發出更可靠、更高效的程式。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 未定义/未指定行为篇</title>
  <link>https://ccrysisa.github.io/posts/c-undefined-behavior/</link>
  <pubDate>Wed, 24 Apr 2024 21:09:40 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-undefined-behavior/</guid>
  <description><![CDATA[<blockquote>
<p>C 語言最初為了開發 UNIX 和系統軟體而生，本質是低階的程式語言，在語言規範層級存在 undefined behavior，可允許編譯器引入更多最佳化</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 编译器原理和案例分析</title>
  <link>https://ccrysisa.github.io/posts/c-compiler-construction/</link>
  <pubDate>Tue, 23 Apr 2024 15:17:38 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-compiler-construction/</guid>
  <description><![CDATA[<blockquote>
<p>AMaCC 是由成功大學師生開發的 self-compiling 的 C 語言編譯器，可產生 Arm 架構的執行檔 (ELF 格式，運作在 GNU/Linux)、也支援 just-in-time (JIT) 編譯和執行，原始程式碼僅 1500 行，在這次講座中，我們就來揭開 AMaCC 背後的原理和實作議題。</p>
<p>預期會接觸到 IR (Intermediate representation), dynamic linking, relocation, symbol table, parsing tree, language frontend, Arm 指令編碼和 ABI 等等。</p>
</blockquote>]]></description>
</item>
<item>
  <title>CS:APP 第 2 章重点提示和练习</title>
  <link>https://ccrysisa.github.io/posts/csapp-ch2/</link>
  <pubDate>Fri, 19 Apr 2024 15:33:40 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/csapp-ch2/</guid>
  <description><![CDATA[<blockquote>
<p>千万不要小看数值系统，史上不少有名的 <a href="https://hackmd.io/@sysprog/software-failure"target="_blank" rel="external nofollow noopener noreferrer">软体缺失案例</a> 就因为开发者未能充分掌握相关议题，而导致莫大的伤害与损失。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Linux 核心的红黑树</title>
  <link>https://ccrysisa.github.io/posts/linux-rbtree/</link>
  <pubDate>Fri, 12 Apr 2024 19:00:59 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux-rbtree/</guid>
  <description><![CDATA[<blockquote>
<p>Linux 核心原始程式碼中，許多地方出現紅黑樹的蹤影，例如：hr_timer 使用紅黑樹來記錄計時器 (timer) 端發出的要求、ext3 檔案系統使用紅黑樹來追蹤目錄內容變更，以及 CFS (Completely Fair Scheduler) 這個 Linux 預設 CPU 排程器，由於需要頻繁地插入跟移除節點 (任務)，因此開發者選擇用紅黑樹 (搭配一些效能調整)。VMA（Virtual Memory Area）也用紅黑樹來紀錄追蹤頁面 (page) 變更，因為後者不免存在頻繁的讀取 VMA 結構，如 page fault 和 mmap 等操作，且當大量的已映射 (mapped) 區域時存在時，若要尋找某個特定的虛擬記憶體地址，鏈結串列 (linked list) 的走訪成本過高，因此需要一種資料結構以提供更有效率的尋找，於是紅黑樹就可勝任。</p>
</blockquote>]]></description>
</item>
<item>
  <title>并行程序设计: POSIX Threads</title>
  <link>https://ccrysisa.github.io/posts/posix-threads/</link>
  <pubDate>Wed, 10 Apr 2024 16:09:35 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/posix-threads/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 技巧篇</title>
  <link>https://ccrysisa.github.io/posts/c-trick/</link>
  <pubDate>Wed, 10 Apr 2024 16:06:08 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-trick/</guid>
  <description><![CDATA[<blockquote>
<p>本次講座將選定幾個案例，藉此解說 C 語言程式設計的技巧，像是對矩陣操作進行包裝、初始化特定結構的成員、追蹤物件配置的記憶體、Smart Pointer 等等。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: goto 和流程控制篇</title>
  <link>https://ccrysisa.github.io/posts/c-control-flow/</link>
  <pubDate>Fri, 05 Apr 2024 11:39:34 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-control-flow/</guid>
  <description><![CDATA[<blockquote>
<p>goto 在 C 語言被某些人看做是妖魔般的存在，不過實在不用這樣看待，至少在 Linux 核心原始程式碼中，goto 是大量存在 (跟你想像中不同吧)。有時不用 goto 會寫出更可怕的程式碼。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 前置处理器应用篇</title>
  <link>https://ccrysisa.github.io/posts/c-preprocessor/</link>
  <pubDate>Mon, 25 Mar 2024 22:55:44 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-preprocessor/</guid>
  <description><![CDATA[<blockquote>
<p>C 语言之所以不需要时常发布新的语言特性又可以保持活力，前置处理器 (preprocessor) 是很重要的因素，有心者可进行「扩充」C 语言。</p>
</blockquote>]]></description>
</item>
</channel>
</rss>
