<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Sysprog - 标签 - KZnight&#39;s Blog</title>
    <link>https://ccrysisa.github.io/tags/sysprog/</link>
    <description>Sysprog - 标签 - KZnight&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>caijiaxin@dragonos.org (ccrysisa)</managingEditor>
      <webMaster>caijiaxin@dragonos.org (ccrysisa)</webMaster><lastBuildDate>Sun, 03 Mar 2024 16:07:14 &#43;0800</lastBuildDate><atom:link href="https://ccrysisa.github.io/tags/sysprog/" rel="self" type="application/rss+xml" /><item>
  <title>Linux 核心设计/实作 (Linux Kernel Internals)</title>
  <link>https://ccrysisa.github.io/posts/linux2023/</link>
  <pubDate>Wed, 28 Feb 2024 20:46:33 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023/</guid>
  <description><![CDATA[<blockquote>
<p>在 Linux 核心设计/实作 Spring 2023 课程进度页面的原始档案的基础上，稍作修改以记录我的学习进度</p>
</blockquote>]]></description>
</item>
<item>
  <title>Linux 核心设计: 发展动态回顾</title>
  <link>https://ccrysisa.github.io/posts/linux-dev-review/</link>
  <pubDate>Sun, 03 Mar 2024 16:07:14 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux-dev-review/</guid>
  <description><![CDATA[<blockquote>
<p>本講座將以 Thorsten Leemhuis 在 FOSDEM 2020 開場演說 &ldquo;Linux kernel – Solving big problems in small steps for more than 20 years&rdquo; (slides) 為主軸，嘗試歸納自 21 世紀第一年開始的 Linux 核心 2.4 版到如今的 5.x 版，中間核心開發者如何克服 SMP (Symmetric multiprocessing), scalability, 及各式硬體架構和周邊裝置支援等難題，過程中提出全面移除 BKL (Big kernel lock)、實作虛擬化技術 (如 Xen 和 KVM)、提出 namespace 和 cgroups 從而確立容器化 (container) 的能力，再來是核心發展的明星技術 eBPF 會在既有的基礎之上，帶來 XDP 和哪些令人驚豔的機制呢？又，Linux 核心終於正式納入發展十餘年的 PREEMPT_RT，使得 Linux 核心得以成為硬即時的作業系統，對內部設計有哪些衝擊？AIO 後繼的 io_uring 讓 Linux 有更優雅且高效的非同步 I/O 存取，我們該如何看待？</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 开发工具和规格标准</title>
  <link>https://ccrysisa.github.io/posts/c-standards/</link>
  <pubDate>Wed, 28 Feb 2024 11:11:47 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-standards/</guid>
  <description><![CDATA[<blockquote>
<p>Linux 核心作为世界上最成功的开放原始码计划，也是 C 语言在工程领域的瑰宝，里头充斥则各种“艺术”，往往会吓到初次接触的人们，但总是能够使用 C 语言标准和开发工具提供的扩展 (主要是来自 gcc 的 GNU extensions) 来解释。</p>
<ul>
<li>“工欲善其事，必先利其器”</li>
</ul>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 内存管理、对齐及硬体特性</title>
  <link>https://ccrysisa.github.io/posts/c-memory/</link>
  <pubDate>Tue, 27 Feb 2024 22:44:38 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-memory/</guid>
  <description><![CDATA[<blockquote>
<p>不少 C/C++ 开发者听过 &ldquo;内存对齐&rdquo; (memory alignment)，但不易掌握概念及规则，遑论其在执行时期的冲击。内存管理像是 malloc/free 函数的使用，是每个 C 语言程序设计开发者都会接触到，但却难保充分排除错误的难题。本讲座尝试从硬体的行为开始探讨，希望消除观众对于 alignment, padding, memory allocator 的误解，并且探讨高效能 memory pool 的设计，如何改善整体程序的效能和可靠度。也会探讨 C11 标准的 aligned_alloc。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: bitwise 操作</title>
  <link>https://ccrysisa.github.io/posts/c-bitwise/</link>
  <pubDate>Fri, 23 Feb 2024 13:13:33 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-bitwise/</guid>
  <description><![CDATA[<blockquote>
<p>Linux 核心原始程式码存在大量 bit(-wise) operations (简称 bitops)，颇多乍看像是魔法的 C 程式码就是 bitops 的组合。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 数值系统</title>
  <link>https://ccrysisa.github.io/posts/c-numerics/</link>
  <pubDate>Tue, 20 Feb 2024 11:13:57 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-numerics/</guid>
  <description><![CDATA[<blockquote>
<p>尽管数值系统并非 C 语言所持有，但在 Linux 核心大量存在 u8/u16/u32/u64 这样通过 typedef 所定义的类型，伴随着各种 alignment 存取，如果对数值系统的认知不够充分，可能立即就被阻拦在探索 Linux 核心之外——毕竟你完全搞不清楚，为何 Linux 核心存取特定资料需要绕一大圈。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Linux 核心设计: C Programming Lab</title>
  <link>https://ccrysisa.github.io/posts/linux2023-lab0/</link>
  <pubDate>Mon, 19 Feb 2024 16:23:01 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023-lab0/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>Linux 核心设计: 第 1 周测验题 linked list</title>
  <link>https://ccrysisa.github.io/posts/linux-quiz1/</link>
  <pubDate>Fri, 16 Feb 2024 14:59:25 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux-quiz1/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>Linux 核心设计: 操作系统术语及概念</title>
  <link>https://ccrysisa.github.io/posts/linux-concepts/</link>
  <pubDate>Thu, 15 Feb 2024 12:51:49 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux-concepts/</guid>
  <description><![CDATA[<blockquote>
<p>面對原始程式碼超越 3 千萬行規模的 Linux 核心 (2023 年)，最令人感到挫折的，絕非缺乏程式註解，而是就算見到滿滿的註解，自己卻有如文盲，全然無從理解起。為什麼呢？往往是因為對作業系統的認知太侷限。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: linked list 和非连续内存</title>
  <link>https://ccrysisa.github.io/posts/c-linked-list/</link>
  <pubDate>Sat, 03 Feb 2024 10:44:56 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-linked-list/</guid>
  <description><![CDATA[<blockquote>
<p>无论是操作系统核心、C 语言函数库内部、程序开发框架，到应用程序，都不难见到 linked list 的身影，包含多种针对性能和安全议题所做的 linked list 变形，又还要考虑应用程序的泛用性 (generic programming)，是很好的进阶题材。</p>
</blockquote>]]></description>
</item>
</channel>
</rss>
