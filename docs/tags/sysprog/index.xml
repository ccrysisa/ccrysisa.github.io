<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Sysprog - 标签 - KZnight&#39;s Blog</title>
    <link>https://ccrysisa.github.io/tags/sysprog/</link>
    <description>Sysprog - 标签 - KZnight&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>caijiaxin@dragonos.org (ccrysisa)</managingEditor>
      <webMaster>caijiaxin@dragonos.org (ccrysisa)</webMaster><lastBuildDate>Wed, 19 Jun 2024 09:43:11 &#43;0800</lastBuildDate><atom:link href="https://ccrysisa.github.io/tags/sysprog/" rel="self" type="application/rss+xml" /><item>
  <title>Linux 核心设计/实作 (Linux Kernel Internals)</title>
  <link>https://ccrysisa.github.io/posts/linux2023/</link>
  <pubDate>Wed, 28 Feb 2024 20:46:33 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023/</guid>
  <description><![CDATA[<blockquote>
<p>在「Linux 核心设计/实作」Spring 2023 课程进度页面的原始档案的基础上，稍作修改以记录我的学习进度</p>
</blockquote>]]></description>
</item>
<item>
  <title>Atomic Weapons: The C&#43;&#43; Memory Model and Modern Hardware</title>
  <link>https://ccrysisa.github.io/posts/atomic-weapons/</link>
  <pubDate>Wed, 19 Jun 2024 09:43:11 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/atomic-weapons/</guid>
  <description><![CDATA[<blockquote>
<p>This is a two-part talk that covers the C++ memory model, how locks and atomics and fences interact and map to hardware, and more. Even though we’re talking about C++, much of this is also applicable to Java and .NET which have similar memory models, but not all the features of C++ (such as relaxed atomics).</p>
</blockquote>]]></description>
</item>
<item>
  <title>手把手带你使用 Rust 实现链表</title>
  <link>https://ccrysisa.github.io/posts/too-many-lists/</link>
  <pubDate>Sat, 15 Jun 2024 20:24:56 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/too-many-lists/</guid>
  <description><![CDATA[<div class="details admonition abstract open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-list-ul fa-fw" aria-hidden="true"></i>摘要<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>其它语言：兄弟，语言学了吗？来写一个链表证明你基本掌握了语法。</p>
<p>Rust 语言: 兄弟，语言精通了吗？来写一个链表证明你已经精通了 Rust！</p>
</div>
    </div>
  </div>]]></description>
</item>
<item>
  <title>从 Revolution OS 看操作系统生态变化</title>
  <link>https://ccrysisa.github.io/posts/revolution-os/</link>
  <pubDate>Sun, 09 Jun 2024 19:50:03 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/revolution-os/</guid>
  <description><![CDATA[<blockquote>
<p>2001 年，J. T. S. Moore 以自由軟體和開放原始碼軟體發展為主題，導演相當可貴的紀錄片《Revolution OS》，訪談若干先鋒者，是理解黑客 (hacker)、 GNU 計畫、自由軟體基金會 (FSF)、Linux 核心 (kernel)、開放原始碼 (open source) 和自由軟體 (free software) 基於不同理念各自發展、Netscape 宣佈 Mozilla 開放原始碼專案、基於 Apache 和一系列開放原始碼技術的公司、在 NASDAQ 上市等等歷程的第一手資訊。</p>
</blockquote>]]></description>
</item>
<item>
  <title>Linux 核心设计: 2023q2 第二周测验题</title>
  <link>https://ccrysisa.github.io/posts/linux2023-quiz2/</link>
  <pubDate>Sat, 08 Jun 2024 10:52:10 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023-quiz2/</guid>
  <description><![CDATA[<div class="details admonition abstract open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-list-ul fa-fw" aria-hidden="true"></i>摘要<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">目的: 检验学员对 bitwise 的认知</div>
    </div>
  </div>]]></description>
</item>
<item>
  <title>Linux 核心设计: 2023q1 第一周测验题</title>
  <link>https://ccrysisa.github.io/posts/linux2023-quiz1/</link>
  <pubDate>Fri, 07 Jun 2024 10:33:35 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/linux2023-quiz1/</guid>
  <description><![CDATA[<div class="details admonition abstract open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-list-ul fa-fw" aria-hidden="true"></i>摘要<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">目的: 检验学员对 linked list 的认知</div>
    </div>
  </div>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 浮点数</title>
  <link>https://ccrysisa.github.io/posts/c-floating-point/</link>
  <pubDate>Tue, 04 Jun 2024 23:59:50 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-floating-point/</guid>
  <description><![CDATA[<blockquote>
<p>工程領域往往是一系列的取捨結果，浮點數更是如此，在軟體發開發有太多失誤案例源自工程人員對浮點數運算的掌握不足，本議程希望藉由探討真實世界的血淋淋案例，帶著學員思考 IEEE 754 規格和相關軟硬體考量點，最後也會探討在深度學習領域為了改善資料處理效率，而引入的 BFloat16 這樣的新標準</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 编译器和最佳化原理篇</title>
  <link>https://ccrysisa.github.io/posts/c-compiler-optimization/</link>
  <pubDate>Wed, 24 Apr 2024 21:09:59 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-compiler-optimization/</guid>
  <description><![CDATA[<blockquote>
<p>編譯器最佳化篇將以 gcc / llvm 為探討對象，簡述編譯器如何運作，以及如何實現最佳化，佐以探究 C 編譯器原理和案例分析，相信可以釐清許多人對 C 編譯器的誤解，從而開發出更可靠、更高效的程式。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 未定义/未指定行为篇</title>
  <link>https://ccrysisa.github.io/posts/c-undefined-behavior/</link>
  <pubDate>Wed, 24 Apr 2024 21:09:40 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-undefined-behavior/</guid>
  <description><![CDATA[<blockquote>
<p>C 語言最初為了開發 UNIX 和系統軟體而生，本質是低階的程式語言，在語言規範層級存在 undefined behavior，可允許編譯器引入更多最佳化</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 编译器原理和案例分析</title>
  <link>https://ccrysisa.github.io/posts/c-compiler-construction/</link>
  <pubDate>Tue, 23 Apr 2024 15:17:38 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-compiler-construction/</guid>
  <description><![CDATA[<blockquote>
<p>AMaCC 是由成功大學師生開發的 self-compiling 的 C 語言編譯器，可產生 Arm 架構的執行檔 (ELF 格式，運作在 GNU/Linux)、也支援 just-in-time (JIT) 編譯和執行，原始程式碼僅 1500 行，在這次講座中，我們就來揭開 AMaCC 背後的原理和實作議題。</p>
<p>預期會接觸到 IR (Intermediate representation), dynamic linking, relocation, symbol table, parsing tree, language frontend, Arm 指令編碼和 ABI 等等。</p>
</blockquote>]]></description>
</item>
</channel>
</rss>
