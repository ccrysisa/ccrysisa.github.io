<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Rust - 标签 - KZnight&#39;s Blog</title>
    <link>https://ccrysisa.github.io/tags/rust/</link>
    <description>Rust - 标签 - KZnight&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>caijiaxin@dragonos.org (ccrysisa)</managingEditor>
      <webMaster>caijiaxin@dragonos.org (ccrysisa)</webMaster><lastBuildDate>Mon, 08 Jul 2024 11:21:32 &#43;0800</lastBuildDate><atom:link href="https://ccrysisa.github.io/tags/rust/" rel="self" type="application/rss+xml" /><item>
  <title>Crust of Rust: The Drop Check</title>
  <link>https://ccrysisa.github.io/posts/drop-check/</link>
  <pubDate>Mon, 08 Jul 2024 11:21:32 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/drop-check/</guid>
  <description><![CDATA[<blockquote>
<p>In this episode of Crust of Rust, we go over the &quot;drop check&quot; — another niche part of Rust that most people don't have to think about, but which rears its moderately attractive head occasionally when you use generic types in semi-weird ways. In particular, we explore how to implement a Norwegian version of <code>Box</code> (which is really just <code>Box</code> with a different name), and find that the straightforward implementation is not quite as flexible as the standard <code>Box</code> is due to the drop check. When we fix it, we then make it too flexible, and open ourselves the type up to undefined behavior. Which, in turn, we use the drop check to fix. Towards the end, we go through a particularly interesting example at the intersection of the drop check and variance in the form of (ab)using <code>std::iter::Empty</code>.</p>
</blockquote>]]></description>
</item>
<item>
  <title>Build a linked hash map in Rust</title>
  <link>https://ccrysisa.github.io/posts/build-a-linked-hashmap-in-rust/</link>
  <pubDate>Fri, 28 Jun 2024 11:16:51 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/build-a-linked-hashmap-in-rust/</guid>
  <description><![CDATA[<blockquote>
<p>We're writing it end-to-end in one sitting, with the hope of ending up with a decent understanding of how hash map works, and how you'd make the interface idiomatic Rust. I have tried to make sure I introduce new concepts we come across, so it should be possible to follow whether you're a newcomer to the language or not.</p>
</blockquote>]]></description>
</item>
<item>
  <title>手把手带你使用 Rust 实现链表</title>
  <link>https://ccrysisa.github.io/posts/too-many-lists/</link>
  <pubDate>Sat, 15 Jun 2024 20:24:56 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/too-many-lists/</guid>
  <description><![CDATA[<div class="details admonition abstract open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-list-ul fa-fw" aria-hidden="true"></i>摘要<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>其它语言：兄弟，语言学了吗？来写一个链表证明你基本掌握了语法。</p>
<p>Rust 语言: 兄弟，语言精通了吗？来写一个链表证明你已经精通了 Rust！</p>
</div>
    </div>
  </div>]]></description>
</item>
<item>
  <title>Command Line Applications in Rust</title>
  <link>https://ccrysisa.github.io/posts/rust-cli/</link>
  <pubDate>Mon, 29 Apr 2024 16:23:33 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/rust-cli/</guid>
  <description><![CDATA[<blockquote>
<p>Rust is a statically compiled, fast language with great tooling and a rapidly growing ecosystem. That makes it a great fit for writing command line applications: They should be small, portable, and quick to run. Command line applications are also a great way to get started with learning Rust; or to introduce Rust to your team!</p>
</blockquote>]]></description>
</item>
<item>
  <title>Rust Lifetime: 由浅入深理解生命周期</title>
  <link>https://ccrysisa.github.io/posts/lifetime-in-rust/</link>
  <pubDate>Fri, 05 Apr 2024 17:52:13 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/lifetime-in-rust/</guid>
  <description><![CDATA[<blockquote>
<p>从基础到进阶讲解探讨 Rust 生命周期，不仅仅是 lifetime kata，还有更多的 lifetime 资料，都来讲解和探讨，从「入门 Rust」到「进阶 Rust」</p>
</blockquote>]]></description>
</item>
<item>
  <title>Crust of Rust: Subtying and Variance</title>
  <link>https://ccrysisa.github.io/posts/subtying-and-variance/</link>
  <pubDate>Sun, 17 Mar 2024 10:38:01 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/subtying-and-variance/</guid>
  <description><![CDATA[<blockquote>
<p>In this episode of Crust of Rust, we go over subtyping and variance — a niche part of Rust that most people don&rsquo;t have to think about, but which is deeply ingrained in some of Rust&rsquo;s borrow ergonomics, and occasionally manifests in confusing ways. In particular, we explore how trying to implement the relatively straightforward <code>strtok</code> function from C/C++ in Rust quickly lands us in a place where the function is more or less impossible to call due to variance!</p>
</blockquote>]]></description>
</item>
<item>
  <title>Crust of Rust: Sorting Algorithms</title>
  <link>https://ccrysisa.github.io/posts/orst/</link>
  <pubDate>Mon, 04 Mar 2024 15:02:28 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/orst/</guid>
  <description><![CDATA[<blockquote>
<p>In this Crust of Rust episode, we implement some common sorting algorithms in Rust. This episode doesn't aim to explain any single concept, but rather showcase what writing &ldquo;normal&rdquo; Rust code is like, and explaining various &ldquo;odd bits&rdquo; we come across along the way. The thinking here is that sorting algorithms are both familiar and easy to compare across languages, so this might serve as a good bridge into Rust if you are familiar with other languages.</p>
</blockquote>]]></description>
</item>
<item>
  <title>Crust of Rust: Channels</title>
  <link>https://ccrysisa.github.io/posts/channels/</link>
  <pubDate>Thu, 29 Feb 2024 20:30:30 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/channels/</guid>
  <description><![CDATA[<blockquote>
<p>In this (fifth) Crust of Rust video, we cover multi-produce/single-consumer (mpsc) channels, by re-implementing some of the std::sync::mpsc types from the standard library. As part of that, we cover what channels are used for, how they work at a high level, different common channel variants, and common channel implementations. In the process, we go over some common Rust concurrency primitives like Mutex and Condvar.</p>
</blockquote>]]></description>
</item>
<item>
  <title>Crust of Rust: Smart Pointers and Interior Mutability</title>
  <link>https://ccrysisa.github.io/posts/smart-pointers-and-interior-mutability/</link>
  <pubDate>Tue, 20 Feb 2024 17:33:06 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/smart-pointers-and-interior-mutability/</guid>
  <description><![CDATA[<blockquote>
<p>In this fourth Crust of Rust video, we cover smart pointers and interior mutability, by re-implementing the Cell, RefCell, and Rc types from the standard library. As part of that, we cover when those types are useful, how they work, and what the equivalent thread-safe versions of these types are. In the process, we go over some of the finer details of Rust's ownership model, and the UnsafeCell type. We also dive briefly into the Drop Check rabbit hole (<a href="https://doc.rust-lang.org/nightly/nomicon/dropck.html"target="_blank" rel="external nofollow noopener noreferrer">https://doc.rust-lang.org/nightly/nomicon/dropck.html</a>) before coming back up for air.</p>
</blockquote>]]></description>
</item>
<item>
  <title>Impl Rust: TCP/IP</title>
  <link>https://ccrysisa.github.io/posts/impl-tcp-in-rust/</link>
  <pubDate>Sat, 17 Feb 2024 19:01:53 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/impl-tcp-in-rust/</guid>
  <description><![CDATA[<blockquote>
<p>In this stream, we started implementing the ubiquitous TCP protocol that underlies much of the traffic on the internet! In particular, we followed RFC 793 — <a href="https://tools.ietf.org/html/rfc793"target="_blank" rel="external nofollow noopener noreferrer">https://tools.ietf.org/html/rfc793</a> — which describes the original protocol, with the goal of being able to set up and tear down a connection with a &ldquo;real&rdquo; TCP stack at the other end (netcat in particular). We&rsquo;re writing it using a user-space networking interface (see <a href="https://www.kernel.org/doc/Documentation/networking/tuntap.txt"target="_blank" rel="external nofollow noopener noreferrer">https://www.kernel.org/doc/Documentation/networking/tuntap.txt</a> and the Rust bindings at <a href="https://docs.rs/tun-tap/%29"target="_blank" rel="external nofollow noopener noreferrer">https://docs.rs/tun-tap/)</a>.</p>
</blockquote>]]></description>
</item>
</channel>
</rss>
