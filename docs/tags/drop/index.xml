<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Drop - 标签 - KZnight&#39;s Blog</title>
    <link>https://ccrysisa.github.io/tags/drop/</link>
    <description>Drop - 标签 | KZnight&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>caijiaxin@dragonos.org (ccrysisa)</managingEditor>
      <webMaster>caijiaxin@dragonos.org (ccrysisa)</webMaster><lastBuildDate>Mon, 08 Jul 2024 11:21:32 &#43;0800</lastBuildDate><atom:link href="https://ccrysisa.github.io/tags/drop/" rel="self" type="application/rss+xml" /><item>
  <title>Crust of Rust: The Drop Check</title>
  <link>https://ccrysisa.github.io/posts/drop-check/</link>
  <pubDate>Mon, 08 Jul 2024 11:21:32 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/drop-check/</guid>
  <description><![CDATA[<blockquote>
<p>In this episode of Crust of Rust, we go over the &quot;drop check&quot; — another niche part of Rust that most people don't have to think about, but which rears its moderately attractive head occasionally when you use generic types in semi-weird ways. In particular, we explore how to implement a Norwegian version of <code>Box</code> (which is really just <code>Box</code> with a different name), and find that the straightforward implementation is not quite as flexible as the standard <code>Box</code> is due to the drop check. When we fix it, we then make it too flexible, and open ourselves the type up to undefined behavior. Which, in turn, we use the drop check to fix. Towards the end, we go through a particularly interesting example at the intersection of the drop check and variance in the form of (ab)using <code>std::iter::Empty</code>.</p>
</blockquote>]]></description>
</item>
</channel>
</rss>
