<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Compiler - 标签 - KZnight&#39;s Blog</title>
    <link>https://ccrysisa.github.io/tags/compiler/</link>
    <description>Compiler - 标签 | KZnight&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>caijiaxin@dragonos.org (ccrysisa)</managingEditor>
      <webMaster>caijiaxin@dragonos.org (ccrysisa)</webMaster><lastBuildDate>Wed, 24 Apr 2024 21:09:59 &#43;0800</lastBuildDate><atom:link href="https://ccrysisa.github.io/tags/compiler/" rel="self" type="application/rss+xml" /><item>
  <title>你所不知道的 C 语言: 编译器和最佳化原理篇</title>
  <link>https://ccrysisa.github.io/posts/c-compiler-optimization/</link>
  <pubDate>Wed, 24 Apr 2024 21:09:59 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-compiler-optimization/</guid>
  <description><![CDATA[<blockquote>
<p>編譯器最佳化篇將以 gcc / llvm 為探討對象，簡述編譯器如何運作，以及如何實現最佳化，佐以探究 C 編譯器原理和案例分析，相信可以釐清許多人對 C 編譯器的誤解，從而開發出更可靠、更高效的程式。</p>
</blockquote>]]></description>
</item>
<item>
  <title>你所不知道的 C 语言: 编译器原理和案例分析</title>
  <link>https://ccrysisa.github.io/posts/c-compiler-construction/</link>
  <pubDate>Tue, 23 Apr 2024 15:17:38 &#43;0800</pubDate>
  <author>ccrysisa</author>
  <guid>https://ccrysisa.github.io/posts/c-compiler-construction/</guid>
  <description><![CDATA[<blockquote>
<p>AMaCC 是由成功大學師生開發的 self-compiling 的 C 語言編譯器，可產生 Arm 架構的執行檔 (ELF 格式，運作在 GNU/Linux)、也支援 just-in-time (JIT) 編譯和執行，原始程式碼僅 1500 行，在這次講座中，我們就來揭開 AMaCC 背後的原理和實作議題。</p>
<p>預期會接觸到 IR (Intermediate representation), dynamic linking, relocation, symbol table, parsing tree, language frontend, Arm 指令編碼和 ABI 等等。</p>
</blockquote>]]></description>
</item>
</channel>
</rss>
